; This file contains the externalized sql statements for rip runner common to all database engines (based on Mysql)

database_exists_check = "SELECT count(SCHEMA_NAME) as count FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = :dbname"

database_table_exists_check = "SELECT count(*) as count FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = :dbname AND table_name = :dbtable"

database_create = "CREATE DATABASE :db"

admin_user_create = "INSERT INTO user_accounts (firehall_id,user_id,user_pwd,access)
                     VALUES(:fhid,'admin',:pwd,1)"

login_user_check = "SELECT id, firehall_id, user_id, user_pwd, access, user_type, twofa, twofa_key, email
                    FROM user_accounts
                    WHERE user_id = :id AND firehall_id = :fhid AND active = 1
                    LIMIT 1"

ldap_login_user_check = "SELECT id, firehall_id, user_id, access, user_type, twofa, twofa_key, email
                    FROM ldap_user_accounts
                    WHERE user_id = :id AND firehall_id = :fhid
                    LIMIT 1"
                    
login_user_password_check = "SELECT user_pwd
                             FROM user_accounts
                             WHERE id = :id AND firehall_id = :fhid AND active = 1
                             LIMIT 1"
                                                 
login_brute_force_check = "SELECT time FROM login_attempts
                           WHERE useracctid = :id AND time > NOW() - INTERVAL 2 HOUR"

login_brute_force_insert = "INSERT INTO login_attempts(useracctid, time)
                            VALUES (:uid, CURRENT_TIMESTAMP())"
                            
users_mobile_access_list = "SELECT mobile_phone, id, firehall_id, user_id 
                            FROM user_accounts 
                            WHERE mobile_phone <> '' AND (access & :sms_access) AND active = 1"

users_email_list = "SELECT id, firehall_id, user_id, email 
                            FROM user_accounts 
                            WHERE email <> '' AND active = 1"

users_admin_list = "SELECT id, firehall_id, user_id, email, mobile_phone 
                            FROM user_accounts 
                            WHERE firehall_id = :fhid AND access & :admin_access AND active = 1"

check_live_callouts = "SELECT * FROM callouts 
                       WHERE status NOT IN (3,10) AND TIMESTAMPDIFF(HOUR,calltime,CURRENT_TIMESTAMP()) <= :max_age
                       ORDER BY id DESC LIMIT 1"

check_live_callouts_max = "SELECT * FROM callouts 
                           WHERE status NOT IN (3,10) AND TIMESTAMPDIFF(HOUR,calltime,CURRENT_TIMESTAMP()) <= :max_age
                           ORDER BY id DESC LIMIT 5"
                       
check_trigger_history_by_type = "SELECT hash_data
                           FROM trigger_history
                           WHERE type = :type AND firehall_id = :fhid"

trigger_history_insert = "INSERT INTO trigger_history (triggertime, type, firehall_id, hash_data) 
                            SELECT CURRENT_TIMESTAMP(), :type, :fhid, :hash_data FROM dual
                            WHERE NOT EXISTS (SELECT * FROM trigger_history WHERE type=:type AND firehall_id=:fhid AND hash_data=:hash_data) 
                            LIMIT 1"
                            
check_existing_callout = "SELECT id,call_key,status
                            FROM callouts WHERE calltime = :ctime AND calltype = :ctype AND
                            (address = :caddress OR (latitude = :lat AND longitude = :long))"
                            
callout_update = "UPDATE callouts
                  SET address = :caddress, latitude = :lat, longitude = :long, units = :units
                  WHERE id = :id AND (address <> :caddress OR latitude <> :lat OR longitude <> :long)"                            
              
callout_status_update = "UPDATE callouts SET status = :status WHERE id = :id AND status NOT in(3,10)"

callout_insert = "INSERT INTO callouts (calltime,calltype,address,latitude,longitude,units,call_key)
                  values(:cdatetime, :ctype, :caddress, :lat, :long, :units, :ckid)"                            
                  
ldap_user_accounts_insert = "INSERT IGNORE INTO ldap_user_accounts (id,firehall_id,user_id,mobile_phone,access,user_type)
                             values(:uid,:fhid,:user_id,:mobile_phone,:access,:user_type)"

ldap_user_accounts_create = "CREATE TEMPORARY TABLE IF NOT EXISTS ldap_user_accounts (
            id INT( 11 ) NOT NULL AUTO_INCREMENT PRIMARY KEY,
            firehall_id varchar(80) COLLATE utf8_unicode_ci NOT NULL,
            user_id varchar(255) COLLATE utf8_unicode_ci NOT NULL,
            email  varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
            user_pwd varchar(255) COLLATE utf8_unicode_ci NOT NULL,
            mobile_phone varchar(25) COLLATE utf8_unicode_ci NOT NULL,
            access INT( 11 ) NOT NULL DEFAULT 0,
            user_type int(11),
            active BOOLEAN NOT NULL DEFAULT 1,
            updatetime timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
            ) ENGINE = INNODB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;"
            
ldap_user_accounts_count = "SELECT count(*) as usercount from ldap_user_accounts"

ldap_user_accounts_select_by_mobile = "SELECT id,user_id 
                                       FROM ldap_user_accounts 
                                       WHERE firehall_id = :fhid AND mobile_phone = :mobile_phone AND active = 1"

user_accounts_select_by_mobile = "SELECT id,user_id 
                                  FROM user_accounts 
                                  WHERE firehall_id = :fhid AND mobile_phone = :mobile_phone AND active = 1"

devicereg_select_by_fhid = "SELECT registration_id FROM devicereg WHERE firehall_id = :fhid";

devicereg_select_by_fhid_userid = "SELECT registration_id FROM devicereg WHERE firehall_id = :fhid AND user_id = :uid";

devicereg_delete_by_regid = "DELETE FROM devicereg WHERE registration_id = :reg_id"

user_accounts_update = "UPDATE user_accounts
                        SET firehall_id = :fhid , user_id = :user_name, email = :email,
                         user_type = :user_type
                         :sql_pwd, 
                         mobile_phone = :mobile_phone
                         :sql_user_access
                        , active = :active
                        , twofa = :twofa
                        , updatetime = CURRENT_TIMESTAMP()
                        WHERE id = :user_id"

user_accounts_update_twofa = "UPDATE user_accounts
                        SET twofa = :twofa, twofa_key = :twofa_key, updatetime = CURRENT_TIMESTAMP()
                        WHERE user_id = :user_id"

user_accounts_insert = "INSERT INTO user_accounts
                         (firehall_id, user_id, email, mobile_phone, user_pwd, access, user_type, active, twofa)
                         VALUES(:fhid, :user_name, :email, :mobile_phone, :user_pwd, :access, :user_type, :active, :twofa)"

user_accounts_delete = "DELETE FROM user_accounts WHERE id = :id"

user_accounts_unlock = "DELETE FROM login_attempts WHERE useracctid = :id AND time > NOW() - INTERVAL 2 HOUR"

check_callouts_by_id_and_keyid = "SELECT * FROM callouts 
                                   :sql_cid
                                   :sql_ckid"

ldap_check_callouts_responding_audit = "SELECT b.user_id, a.*, (time_to_sec(timediff(a.responsetime, LEAST(c.calltime,a.responsetime) )) / 60) as minutes_since_call 
                                     FROM callouts_response_audit a 
                                     LEFT JOIN ldap_user_accounts b ON a.useracctid = b.id 
                                     LEFT JOIN callouts c ON a.calloutid = c.id 
                                     WHERE a.calloutid = :cid ORDER BY a.responsetime"
                                    
check_callouts_responding_audit = "SELECT b.user_id, a.*, (time_to_sec(timediff(a.responsetime, LEAST(c.calltime,a.responsetime) )) / 60) as minutes_since_call
                             FROM callouts_response_audit a 
                             LEFT JOIN user_accounts b ON a.useracctid = b.id 
                             LEFT JOIN callouts c ON a.calloutid = c.id 
                             WHERE a.calloutid = :cid ORDER BY a.responsetime"

callout_response_audit_insert = "INSERT INTO callouts_response_audit (calloutid,useracctid,responsetime,status,eta,latitude,longitude)
                               values(:cid, :uid, CURRENT_TIMESTAMP(), :status, :eta, :lat, :long)"

ldap_check_callouts_responding = "SELECT a.*, b.user_id 
                                     FROM callouts_response a 
                                     LEFT JOIN ldap_user_accounts b ON a.useracctid = b.id 
                                     WHERE a.calloutid = :cid ORDER BY (a.status = 4)"
                                    
check_callouts_responding = "SELECT a.*, b.user_id 
                             FROM callouts_response a 
                             LEFT JOIN user_accounts b ON a.useracctid = b.id 
                             WHERE a.calloutid = :cid ORDER BY (a.status = 4)"

ldap_check_callouts_not_responding = "SELECT id, user_id FROM ldap_user_accounts
                                       WHERE firehall_id = :fhid AND access & :respond_access AND id NOT IN (SELECT useracctid
                                       FROM callouts_response WHERE calloutid = :cid) order by user_id ASC"
                                       
check_callouts_not_responding = "SELECT id, user_id FROM user_accounts
                                   WHERE firehall_id = :fhid AND access & :respond_access AND id NOT IN (SELECT useracctid
                                   FROM callouts_response WHERE calloutid = :cid) order by user_id ASC"

ldap_check_callouts_yes_responding = "SELECT id,user_id FROM ldap_user_accounts
                                      WHERE id IN (SELECT useracctid
                                      FROM callouts_response WHERE calloutid = :cid)"
                                      
check_callouts_yes_responding = "SELECT id,user_id FROM user_accounts
                                  WHERE id IN (SELECT useracctid
                                  FROM callouts_response WHERE calloutid = :cid)"
                                      
callout_history_select = "SELECT a.*, (select count(*) AS responders FROM callouts_response b 
                                        WHERE a.id = b.calloutid AND b.status <> 4) AS responders,
                                       (time_to_sec(timediff(max(c.updatetime), LEAST(a.calltime,a.updatetime) )) / 3600) as hours_spent
                             FROM callouts a LEFT JOIN callouts_response c ON a.id = c.calloutid
                             GROUP BY a.id ORDER BY a.calltime DESC"
                             
ldap_callout_history_response_select = "SELECT b.user_id,a.responsetime,a.latitude,a.longitude,
                                         a.status,a.updatetime,c.address
                                         FROM callouts_response a
                                         LEFT JOIN ldap_user_accounts b on a.useracctid = b.id
                                         LEFT JOIN callouts c on a.calloutid = c.id
                                         WHERE calloutid = :cid"
                                           
callout_history_response_select = "SELECT b.user_id,a.responsetime,a.latitude,a.longitude,
                                     a.status,a.updatetime,c.address
                                     FROM callouts_response a
                                     LEFT JOIN user_accounts b on a.useracctid = b.id
                                     LEFT JOIN callouts c on a.calloutid = c.id
                                     WHERE calloutid = :cid"
                                           
ldap_callout_authenticate_by_fhid_and_userid = "SELECT id,user_pwd FROM ldap_user_accounts
                                                WHERE firehall_id = :fhid AND user_id = :uid AND active = 1"
                                           
callout_authenticate_by_fhid_and_userid = "SELECT id,user_pwd FROM user_accounts
                                           WHERE firehall_id = :fhid AND user_id = :uid AND active = 1"
                                           
callout_authenticate_by_id_and_key = "SELECT * FROM callouts WHERE id = :cid AND call_key = :ckid"

callout_total_count_by_id_and_user_and_status = "SELECT COUNT(*) total_count FROM callouts_response 
                                                 WHERE calloutid = :cid AND useracctid = :uid AND status = :status"

callout_response_status_update = "UPDATE callouts_response SET status = :status, eta = :eta, updatetime = CURRENT_TIMESTAMP()
                                  WHERE calloutid = :cid AND useracctid = :uid"
                                                                     
callout_response_status_and_geo_update = "UPDATE callouts_response SET status = :status, eta = :eta, updatetime = CURRENT_TIMESTAMP(),
                                            latitude = :lat, longitude = :long
                                            WHERE calloutid = :cid AND useracctid = :uid"
                                            
callout_response_insert = "INSERT INTO callouts_response (calloutid,useracctid,responsetime,status,eta,latitude,longitude)
                           values(:cid, :uid, CURRENT_TIMESTAMP(), :status, :eta, 0, 0)"
                           
callout_response_geo_insert = "INSERT INTO callouts_response (calloutid,useracctid,responsetime,status,eta,latitude,longitude)
                               values(:cid, :uid, CURRENT_TIMESTAMP(), :status, :eta, :lat, :long)"
                           
callout_status_and_timestamp_update = "UPDATE callouts SET status = :status, updatetime = CURRENT_TIMESTAMP()
                                        WHERE id = :cid AND status NOT IN (3,10)"                           
                                        
check_callout_status_and_location = "SELECT status, latitude, longitude, address
                                     FROM callouts WHERE id = :cid"

ldap_check_callout_tracking_responders = "SELECT a.useracctid, a.calloutid, a.latitude,a.longitude, b.user_id
                                         FROM callouts_geo_tracking a
                                         LEFT JOIN ldap_user_accounts b ON a.useracctid = b.id
                                         WHERE firehall_id = :fhid AND a.calloutid = :cid AND
                                               a.trackingtime = (SELECT MAX(a1.trackingtime) FROM callouts_geo_tracking a1 WHERE a.calloutid = a1.calloutid AND a.useracctid = a1.useracctid)
                                         ORDER BY a.useracctid,a.trackingtime DESC"
                                     
check_callout_tracking_responders = "SELECT a.useracctid, a.calloutid, a.latitude,a.longitude, b.user_id
                                     FROM callouts_geo_tracking a
                                     LEFT JOIN user_accounts b ON a.useracctid = b.id
                                     WHERE firehall_id = :fhid AND a.calloutid = :cid AND
                                           a.trackingtime = (SELECT MAX(a1.trackingtime) FROM callouts_geo_tracking a1 WHERE a.calloutid = a1.calloutid AND a.useracctid = a1.useracctid)
                                     ORDER BY a.useracctid,a.trackingtime DESC"
                                           
callout_status_select_by_id_and_key = "SELECT status FROM callouts WHERE id = :cid AND call_key =:ckid"

callout_tracking_insert = "INSERT INTO callouts_geo_tracking (calloutid,useracctid,latitude,longitude)
                           values(:cid, :uid, :lat, :long)"

devicereg_userid_for_regid_update = "UPDATE devicereg SET user_id = :uid, updatetime = CURRENT_TIMESTAMP()
                                     WHERE registration_id = :regid AND firehall_id = :fhid"
                                     
devicereg_insert = "INSERT INTO devicereg (registration_id,firehall_id,user_id)
                    values(:regid, :fhid, :uid)"

ldap_callout_responders = "SELECT a.*, b.user_id FROM callouts_response a
                           LEFT JOIN ldap_user_accounts b ON a.useracctid = b.id
                           WHERE calloutid = :cid AND b.user_id = :uid"
                           
callout_responders = "SELECT a.*, b.user_id FROM callouts_response a
                       LEFT JOIN user_accounts b ON a.useracctid = b.id
                       WHERE calloutid = :cid AND b.user_id = :uid"

ldap_user_list_select = "SELECT * FROM ldap_user_accounts
                         :criteria 
                         order by access DESC, user_id ASC"
                  
user_list_select = "SELECT * FROM user_accounts
                    :criteria 
                    order by access DESC, user_id ASC"

ldap_user_list_contacts = "SELECT * FROM ldap_user_accounts
                           WHERE mobile_phone <> '' AND access & :respond_access AND active = 1
                           order by user_id ASC"
                  
user_list_contacts = "SELECT * FROM user_accounts
                      WHERE mobile_phone <> '' AND access & :respond_access AND active = 1 
                      order by user_id ASC"

user_type_list_select = "SELECT * FROM user_types
                    order by name ASC"
                  
reports_calltype_by_daterange = "SELECT calltype, COUNT(*) count FROM callouts 
                                 WHERE calltime BETWEEN :start AND :end
                                 AND calltype NOT IN ('TRAINING','TESTONLY')
                                 GROUP BY calltype ORDER BY calltype"
                                 
reports_calltype_all = "SELECT calltype, COUNT(*) count FROM callouts
                        WHERE calltype NOT IN ('TRAINING','TESTONLY')
                        GROUP BY calltype ORDER BY count DESC"
                        
reports_callvolume_titles_by_daterange = "(SELECT ':max_monthly_label' as datalabel)
                                     UNION (SELECT calltype as datalabel
                                     FROM callouts WHERE calltime BETWEEN :start AND :end
                                     AND calltype NOT IN ('TRAINING','TESTONLY')
                                     GROUP BY datalabel) ORDER BY (datalabel=':max_monthly_label') DESC,datalabel"
                                         
reports_callvolume_by_daterange = "(SELECT MONTH(calltime) AS month, ':max_monthly_label' AS datalabel, count(*) AS count
                                     FROM callouts WHERE calltime BETWEEN :start AND :end
                                     AND calltype NOT IN ('TRAINING','TESTONLY')
                                     GROUP BY month ORDER BY month)
                                    UNION (SELECT MONTH(calltime) AS month, calltype AS datalabel, count(*) AS count
                                     FROM callouts WHERE calltime BETWEEN :start AND :end
                                     AND calltype NOT IN ('TRAINING','TESTONLY')
                                     GROUP BY datalabel, month ORDER BY month) ORDER BY month, (datalabel=':max_monthly_label') DESC,datalabel"                                         
                                    
ldap_reports_callresponse_volume_titles_by_daterange = "(SELECT ':max_monthly_label' as datalabel)
                                                   UNION (SELECT b.user_id AS datalabel
                                                          FROM callouts_response a
                                                          LEFT JOIN ldap_user_accounts b ON a.useracctid = b.id
                                                          LEFT JOIN callouts c ON a.calloutid = c.id
                                                          WHERE c.status IN (3,10) AND c.calltime BETWEEN :start AND :end
                                                          AND a.status <> 4
                                                          AND calltype NOT IN ('TRAINING','TESTONLY')
                                                          GROUP BY datalabel) ORDER BY (datalabel=':max_monthly_label') DESC,datalabel"

reports_callresponse_volume_titles_by_daterange = "(SELECT ':max_monthly_label' as datalabel)
                                               UNION (SELECT b.user_id AS datalabel
                                                    FROM callouts_response a
                                                    LEFT JOIN user_accounts b ON a.useracctid = b.id
                                                    LEFT JOIN callouts c ON a.calloutid = c.id
                                                    WHERE c.status IN (3,10) AND c.calltime BETWEEN :start AND :end
                                                    AND a.status <> 4
                                                    AND calltype NOT IN ('TRAINING','TESTONLY')
                                                    GROUP BY datalabel) ORDER BY (datalabel=':max_monthly_label') DESC,datalabel"                                                          

ldap_reports_callresponse_volume_by_daterange = "(SELECT MONTH(calltime) AS month, ':max_monthly_label' AS datalabel, count(*) AS count
                                                 FROM callouts WHERE status IN (3,10) AND calltime BETWEEN :start AND :end
                                                 AND calltype NOT IN ('TRAINING','TESTONLY')
                                                 GROUP BY month ORDER BY month)
                                                 UNION (SELECT MONTH(calltime) AS month, b.user_id AS datalabel, count(distinct c.id) AS count
                                                 FROM callouts_response a
                                                 LEFT JOIN ldap_user_accounts b ON a.useracctid = b.id
                                                 LEFT JOIN callouts c ON a.calloutid = c.id
                                                 WHERE c.status IN (3,10) AND c.calltime BETWEEN :start AND :end
                                                 AND a.status <> 4
                                                 AND calltype NOT IN ('TRAINING','TESTONLY')
                                                 GROUP BY month, datalabel ORDER BY month, datalabel) ORDER BY month, (datalabel=':max_monthly_label') DESC,datalabel"                                                    
                                                 
reports_callresponse_volume_by_daterange = "(SELECT MONTH(calltime) AS month, ':max_monthly_label' AS datalabel, count(*) AS count
                                             FROM callouts WHERE status IN (3,10) AND calltime BETWEEN :start AND :end
                                             AND calltype NOT IN ('TRAINING','TESTONLY')
                                             GROUP BY month ORDER BY month)
                                            UNION (SELECT MONTH(calltime) AS month, b.user_id AS datalabel, count(distinct c.id) AS count
                                             FROM callouts_response a
                                             LEFT JOIN user_accounts b ON a.useracctid = b.id
                                             LEFT JOIN callouts c ON a.calloutid = c.id
                                             WHERE c.status IN (3,10) AND c.calltime BETWEEN :start AND :end
                                             AND a.status <> 4
                                             AND calltype NOT IN ('TRAINING','TESTONLY')
                                             GROUP BY month, datalabel ORDER BY month, datalabel) ORDER BY month, (datalabel=':max_monthly_label') DESC,datalabel"

ldap_reports_callresponse_hours_titles_by_daterange = "(SELECT ':max_monthly_label' as datalabel)
                                                         UNION (SELECT b.user_id AS datalabel
                                                                FROM callouts_response a
                                                                LEFT JOIN ldap_user_accounts b ON a.useracctid = b.id
                                                                LEFT JOIN callouts c ON a.calloutid = c.id
                                                                WHERE c.status IN (3,10) AND c.calltime BETWEEN :start AND :end
                                                                AND a.status <> 4
                                                                AND calltype NOT IN ('TRAINING','TESTONLY')
                                                                GROUP BY datalabel) ORDER BY (datalabel=':max_monthly_label') DESC,datalabel"                                             
                                                                
reports_callresponse_hours_titles_by_daterange = "(SELECT ':max_monthly_label' as datalabel)
                                                   UNION (SELECT b.user_id AS datalabel
                                                          FROM callouts_response a
                                                          LEFT JOIN user_accounts b ON a.useracctid = b.id
                                                          LEFT JOIN callouts c ON a.calloutid = c.id
                                                          WHERE c.status IN (3,10) AND c.calltime BETWEEN :start AND :end
                                                          AND a.status <> 4
                                                          AND calltype NOT IN ('TRAINING','TESTONLY')
                                                          GROUP BY datalabel) ORDER BY (datalabel=':max_monthly_label') DESC,datalabel"                                                                
                                                          
ldap_reports_callresponse_hours_by_daterange = "(SELECT MONTH(calltime) AS month, ':max_monthly_label' AS datalabel, (time_to_sec(timediff(updatetime, LEAST(calltime,updatetime) )) / 3600) as hours_spent, id as cid
                                                 FROM callouts WHERE status IN (3,10) AND calltime BETWEEN :start AND :end
                                                 AND calltype NOT IN ('TRAINING','TESTONLY')
                                                 GROUP BY id, month ORDER BY month, id)
                                                 UNION (SELECT MONTH(c.calltime) AS month, b.user_id AS datalabel, (time_to_sec(timediff(c.updatetime, LEAST(c.calltime,c.updatetime) )) / 3600) as hours_spent, c.id as cid
                                                 FROM callouts_response a
                                                 LEFT JOIN ldap_user_accounts b ON a.useracctid = b.id
                                                 LEFT JOIN callouts c ON a.calloutid = c.id
                                                 WHERE c.status IN (3,10) AND c.calltime BETWEEN :start AND :end
                                                 AND a.status <> 4
                                                 AND calltype NOT IN ('TRAINING','TESTONLY')
                                                 GROUP BY c.id, month, datalabel ORDER BY month, datalabel, cid) ORDER BY month, (datalabel=':max_monthly_label') DESC,datalabel, cid"
                                                                                                           
reports_callresponse_hours_by_daterange = "(SELECT MONTH(calltime) AS month, ':max_monthly_label' AS datalabel, (time_to_sec(timediff(updatetime, LEAST(calltime,updatetime) )) / 3600) as hours_spent, id as cid
                                             FROM callouts WHERE status IN (3,10) AND calltime BETWEEN :start AND :end
                                             AND calltype NOT IN ('TRAINING','TESTONLY')
                                             GROUP BY id, month ORDER BY month, id)
                                            UNION (SELECT MONTH(c.calltime) AS month, b.user_id AS datalabel, (time_to_sec(timediff(c.updatetime, LEAST(c.calltime,c.updatetime) )) / 3600) as hours_spent, c.id as cid
                                             FROM callouts_response a
                                             LEFT JOIN user_accounts b ON a.useracctid = b.id
                                             LEFT JOIN callouts c ON a.calloutid = c.id
                                             WHERE c.status IN (3,10) AND c.calltime BETWEEN :start AND :end
                                             AND a.status <> 4
                                             AND calltype NOT IN ('TRAINING','TESTONLY')
                                             GROUP BY c.id, month, datalabel ORDER BY month, datalabel, c.id) ORDER BY month, (datalabel=':max_monthly_label') DESC,datalabel, cid"
                                                                                                                                                       
config_manager_get_firehall = "SELECT * FROM config WHERE firehall_id = :fhid"                                                                                                                                                    

report_years_with_data = "SELECT YEAR(calltime) AS year FROM callouts WHERE YEAR(calltime) > 0 GROUP BY year ORDER BY year"

select_db_timezone = "SELECT IF(@@session.time_zone = 'SYSTEM', @@system_time_zone, @@session.time_zone);"

status_list_select = "SELECT * FROM callout_status
                      order by name ASC"

type_list_select = "SELECT *,((curdate() > effective_date OR effective_date is NULL) and 
                      (curdate() < expiration_date OR expiration_date is NULL)) as active 
                      FROM callout_type order by active DESC,code ASC"



callout_type_update = "UPDATE callout_type
                        SET code = :code, name = :name, description = :description,
                            custom_tag = :custom_tag, effective_date = :effective_date,
                            expiration_date = :expiration_date,
                            updatetime = CURRENT_TIMESTAMP()
                        WHERE id = :id"
                        
callout_type_insert = "INSERT INTO callout_type
                         (code, name, description, custom_tag, effective_date, expiration_date)
                         VALUES(:code, :name, :description, :custom_tag, :effective_date, :expiration_date)"

callout_type_delete = "DELETE FROM callout_type WHERE id = :id"

callout_statuses_update = "UPDATE callout_status
                        SET name = :name, display_name = :display_name, status_flags = :status_flags,
                            behaviour_flags = :behaviour_flags, access_flags = :access_flags,
                            access_flags_inclusive = :access_flags_inclusive, user_types_allowed = :user_types_allowed,
                            updatetime = CURRENT_TIMESTAMP()
                        WHERE id = :id"
                        
callout_statuses_insert = "INSERT INTO callout_status
                         (id, name, display_name, status_flags, behaviour_flags, access_flags, access_flags_inclusive, user_types_allowed)
                         SELECT MAX(id)+1, :name, :display_name, :status_flags, :behaviour_flags, :access_flags, :access_flags_inclusive, :user_types_allowed FROM callout_status;"

callout_statuses_delete = "DELETE FROM callout_status WHERE id = :id"

callouts_info_select_all = "SELECT * FROM callouts_info order by address,effective_date"

callouts_info_select_by_address = "SELECT * FROM callouts_info WHERE address = :caddress"

callouts_info_select_by_geolocation = "SELECT * FROM callouts_info WHERE latitude = :lat AND longitude = :long"


callout_address_update = "UPDATE callouts_info
                        SET address = :address, latitude = :latitude, longitude = :longitude,
                            comments = :comments, effective_date = :effective_date,
                            expiration_date = :expiration_date,
                            updatetime = CURRENT_TIMESTAMP()
                        WHERE id = :id"
                        
callout_address_insert = "INSERT INTO callouts_info
                         (address, latitude, longitude, comments, effective_date, expiration_date)
                         VALUES(:address, :latitude, :longitude, :comments, :effective_date, :expiration_date)"

callout_address_delete = "DELETE FROM callouts_info WHERE id = :id"

url_proxy_insert = "INSERT INTO url_proxy (shorturl,longurl)
                     VALUES(:shorturl,:longurl)"

url_proxy_select = "SELECT longurl from url_proxy WHERE shorturl = :shorturl"

login_brute_force_check_ip = "SELECT count(*) FROM login_audit
                              WHERE login_ip = :login_ip AND status >= 100 AND 
                              (SELECT count(*) FROM login_audit WHERE login_ip = :login_ip AND status IN (10) AND updatetime > NOW() - INTERVAL 2 HOUR) <= 0 AND
                              updatetime > NOW() - INTERVAL 2 HOUR"

login_audit_insert = "INSERT INTO login_audit (useracctid, username, status, login_agent, login_ip)
                      VALUES(:useracctid,:username,:status,:login_agent,:login_ip)"

login_audit_by_user = "SELECT * FROM login_audit
                       WHERE useracctid = :useracctid AND status < 100"

schema_version_get = "SELECT keyvalue from config WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_1_1 = "CREATE TABLE IF NOT EXISTS `config` (
                      `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                      `firehall_id` varchar(80) COLLATE utf8_unicode_ci NOT NULL,
                      `keyname` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
                      `keyindex` int(11) NOT NULL DEFAULT 0,
                      `keyvalue` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
                      `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;"
                    
schema_upgrade_1_2 = "INSERT IGNORE INTO config 
                      SET firehall_id = -1, keyname = 'DB_SCHEMA_VERSION', keyindex = 0, keyvalue= '1.2';"
                          
schema_upgrade_1_3 = "UPDATE user_accounts SET access = access | (0x4 | 0x8);"
                          
schema_upgrade_1_4 = "UPDATE config 
                      SET keyvalue= '1.4' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_1_5 = "CREATE TABLE IF NOT EXISTS `user_types` (
                      `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                      `firehall_id` varchar(80) COLLATE utf8_unicode_ci NOT NULL,
                      `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
                      `default_access` int(11) NOT NULL DEFAULT 0,
                      `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;"
                    
schema_upgrade_1_6 = "INSERT IGNORE INTO user_types 
                                    SET firehall_id = -1, name = 'admin', default_access = 1;"
              
schema_upgrade_1_7 = "INSERT IGNORE INTO user_types 
                                    SET firehall_id = -1, name = 'fire fighter', default_access = 12;"
              
schema_upgrade_1_8 = "INSERT IGNORE INTO user_types 
                                    SET firehall_id = -1, name = 'fire apparatus', default_access = 12;"
              
schema_upgrade_1_9 = "INSERT IGNORE INTO user_types 
                                    SET firehall_id = -1, name = 'office staff', default_access = 2;"

schema_upgrade_2_0 = "ALTER TABLE user_accounts ADD COLUMN user_type int(11) AFTER access;"

schema_upgrade_2_1 = "UPDATE user_accounts SET user_type = 4;"

schema_upgrade_2_2 = "UPDATE user_accounts SET user_type = 2 WHERE access & 12;"

schema_upgrade_2_3 = "UPDATE user_accounts SET user_type = 1 WHERE access & 0x1;"

schema_upgrade_2_4 = "UPDATE config 
                      SET keyvalue= '2.4' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_2_5 = "CREATE TABLE IF NOT EXISTS `callout_status` (
                      `id` int(11) NOT NULL PRIMARY KEY,
                      `name` varchar(80) COLLATE utf8_unicode_ci NOT NULL,
                      `display_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
                      `status_flags` int(11) NOT NULL DEFAULT 0,
                      `behaviour_flags` int(11) NOT NULL DEFAULT 0,
                      `access_flags` int(11) NOT NULL DEFAULT 0,
                      `access_flags_inclusive` BOOLEAN NOT NULL DEFAULT 0,
                      `user_types_allowed` int(11) NOT NULL DEFAULT 0,
                      `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;"

schema_upgrade_2_6 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(0, 'Paged', 'Paged', 0, 14, 1, true, 0);";

schema_upgrade_2_7 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(1, 'Notified', 'Notified', 0, 14, 1, true, 0);"

schema_upgrade_2_8 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(2, 'Responding', 'Respond to hall', 1, 30, 29, false, 11);"

schema_upgrade_2_9 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(3, 'Cancelled', 'Cancelled', 4, 30, 29, false, 15);"

schema_upgrade_3_0 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(4, 'NotResponding', 'Not Responding', 2, 16, 29, false, 11);";

schema_upgrade_3_1 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(5, 'Standby_in_area', 'Standby-In-Area', 16, 14, 29, false, 15);"

schema_upgrade_3_2 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(6, 'Responding_at_hall', 'Respond at hall', 1, 14, 29, false, 15);"

schema_upgrade_3_3 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(7, 'Responding_to_scene', 'Respond to scene', 1, 14, 29, false, 15);"

schema_upgrade_3_4 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(8, 'Responding_at_scene', 'Respond at scene', 1, 14, 29, false, 15);"

schema_upgrade_3_5 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(9, 'Responding_return_hall', 'Return to hall', 1, 14, 29, false, 15);"

schema_upgrade_3_6 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(10, 'Complete', 'Complete', 8, 30, 29, false, 15);"

schema_upgrade_3_7 = "INSERT IGNORE INTO callout_status (id,name,display_name,status_flags,behaviour_flags,
                                   access_flags,access_flags_inclusive,user_types_allowed)
                      VALUES(11, 'Standby_in_town', 'Standby-In-Town', 16, 14, 29, false, 15);"
                    
schema_upgrade_3_8 = "UPDATE config 
                      SET keyvalue= '3.8' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"
                      
schema_upgrade_3_9 = "CREATE TABLE IF NOT EXISTS `callout_type` (
                      `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                      `code` varchar(12) COLLATE utf8_unicode_ci NOT NULL,
                      `name` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
                      `description` varchar(255) COLLATE utf8_unicode_ci,
                      `custom_tag` varchar(255) COLLATE utf8_unicode_ci,
                      `effective_date` datetime NULL,
                      `expiration_date` datetime NULL,
                      `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;"

schema_upgrade_4_0 = "INSERT IGNORE INTO callout_type (`code`,`name`,`effective_date`)
                      VALUES
                            ('AIRCR' , 'Aircraft Crash', '2017-01-01'),
                            ('AIREL' , 'Aircraft Emergency Landing', '2017-01-01'),
                            ('AIRF' , 'Aircraft Fire', '2017-01-01'),
                            ('AIRSB' , 'Aircraft Standby', '2017-01-01'),
                            ('ASSIST' , 'Assist - General public or other agency assistance. Not a lift assist call.', '2017-01-01'),
                            ('BBQF' , 'Barbeque Fire', '2017-01-01'),
                            ('BOMB' , 'Bomb Threat', '2017-01-01'),
                            ('BURN' , 'Burning Complaint', '2017-01-01'),
                            ('CARBM' , 'Carbon Monoxide Alarm', '2017-01-01'),
                            ('CHIMF' , 'Chimney Fire', '2017-01-01'),
                            ('CONTF' , 'Container/Sea-Can or Pressurized Vessel Fire', '2017-01-01'),
                            ('DUMP' , 'Dumpster', '2017-01-01'),
                            ('ELECF' , 'Electrical Fire', '2017-01-01'),
                            ('ELECFSUB' , 'Electrical Fire – Substation', '2017-01-01'),
                            ('EXP' , 'Explosion', '2017-01-01'),
                            ('FALRMC' , 'Fire Alarms – Commercial', '2017-01-01'),
                            ('FALRMF' , 'Fire Alarms – False', '2017-01-01'),
                            ('FALRMR' , 'Fire Alarms – Residential', '2017-01-01'),
                            ('FLOOD' , 'Flooding', '2017-01-01'),
                            ('HAZNG' , 'Hazmat – Natural Gas', '2017-01-01'),
                            ('HAZODOUR' , 'Hazmat – Odour', '2017-01-01'),
                            ('HAZSPILL' , 'Hazmat – Spill', '2017-01-01'),
                            ('HAZVAPOUR' , 'Hazmat – Vapour', '2017-01-01'),
                            ('HAZCONF' , 'Hazmat – CONFIRMED', '2017-01-01'),
                            ('HAZUNCON' , 'Hazmat – UNCONFIRMED', '2017-01-01'),
                            ('WIRES' , 'Hydro Lines Down', '2017-01-01'),
                            ('ITEM' , 'Item Fire', '2017-01-01'),
                            ('KITCHENF' , 'Kitchen Item Fire', '2017-01-01'),
                            ('LIFTEMG' , 'Lift Assist – Emergency', '2017-01-01'),
                            ('LIFTR' , 'Lift Assist – Routine', '2017-01-01'),
                            ('LIFTPUB' , 'Lift Assist – Public', '2017-01-01'),
                            ('MED' , 'Medical Aid', '2017-01-01'),
                            ('MEDR' , 'Medical Aid - BCAS Routine', '2017-01-01'),
                            ('MEDFIRE' , 'Medical Emergency/Fire Emergency', '2017-01-01'),
                            ('MEDHAZ' , 'Medical Emergency/Hazmat Emergency', '2017-01-01'),
                            ('MVIMIN' , 'MVI - Minor', '2017-01-01'),
                            ('MVISER' , 'MVI – Serious', '2017-01-01'),
                            ('MVIPED' , 'MVI - Pedestrian', '2017-01-01'),
                            ('OPEN' , 'Open Air Fire', '2017-01-01'),
                            ('RESCCON' , 'Rescue - Confined Space', '2017-01-01'),
                            ('RESCHIGH' , 'Rescue - High Angle', '2017-01-01'),
                            ('RESCICE' , 'Rescue – Ice', '2017-01-01'),
                            ('RESCIND' , 'Rescue – Industrial', '2017-01-01'),
                            ('RESCMED' , 'Rescue - Medical', '2017-01-01'),
                            ('RESC' , 'Rescue – Other', '2017-01-01'),
                            ('RESCWTR' , 'Rescue – Water', '2017-01-01'),
                            ('SHIPD' , 'Ship/Boat Fire - At Dock', '2017-01-01'),
                            ('SHIPU' , 'Ship/Boat Fire – Underway', '2017-01-01'),
                            ('SMOKIN' , 'Smoke Report – Inside', '2017-01-01'),
                            ('STRCOLL' , 'Structure Collapse', '2017-01-01'),
                            ('STROUT' , 'Structure Fire – Outbuilding', '2017-01-01'),
                            ('STRRES' , 'Structure Fire – Residential', '2017-01-01'),
                            ('STRCOM' , 'Structure Fire – Commercial/High Hazard', '2017-01-01'),
                            ('STRHIGH' , 'Structure Fire – High Life/Multi-Family', '2017-01-01'),
                            ('STRRECALL' , 'Structure Fire – Recall', '2017-01-01'),
                            ('TRANS' , 'Transformer/Pole Fire', '2017-01-01'),
                            ('VEHF' , 'Vehicle Fire', '2017-01-01'),
                            ('WILDINT' , 'Wildland – Interface', '2017-01-01'),
                            ('WILD2' , 'Wildland – Large (Rank 4-6)', '2017-01-01'),
                            ('WILD1' , 'Wildland – Small (Rank 1-3)', '2017-01-01'),
                            ('HANG' , '911 Hang Up', '2017-01-01'),
                            ('FOCC' , 'Admin Call Records', '2017-01-01'),
                            ('AMBUL' , 'Ambulance – Notification', '2017-01-01'),
                            ('CITY' , 'City – Notification', '2017-01-01'),
                            ('DISPTEST' , 'Dispatcher Test', '2017-01-01'),
                            ('DUTY' , 'Duty Officer Notification', '2017-01-01'),
                            ('HYDRO' , 'Hydro – Notification', '2017-01-01'),
                            ('INVEST' , 'Investigation', '2017-01-01'),
                            ('NATGAS' , 'Natural Gas – Notification', '2017-01-01'),
                            ('POLICE' , 'Police – Notification', '2017-01-01'),
                            ('TESTONLY' , 'TEST ONLY', null),
                            ('TRAINING' , 'TRAINING NIGHT', null);"

schema_upgrade_4_1 = "INSERT IGNORE INTO callout_type (`code`,`name`,`expiration_date`)
                      VALUES
                            ('ACEL' , 'Aircraft Emergency Landing', '2016-12-31'),
                            ('ACF' , 'Aircraft Fire', '2016-12-31'),
                            ('ACRA' , 'Aircraft Crash', '2016-12-31'),
                            ('ACSB' , 'Aircraft Standby', '2016-12-31'),
                            ('AMBUL' , 'Ambulance - Notification', '2016-12-31'),
                            ('ASSIST' , 'Assist', '2016-12-31'),
                            ('BBQF' , 'Barbeque Fire', '2016-12-31'),
                            ('BOMB' , 'Bomb Threat', '2016-12-31'),
                            ('BURN' , 'Burning Complaint', '2016-12-31'),
                            ('CARBM' , 'Carbon Monoixide Alarm', '2016-12-31'),
                            ('CHIM' , 'Chimney Fire', '2016-12-31'),
                            ('COMP' , 'Complaints', '2016-12-31'),
                            ('DSPTEST' , 'Dispatcher Test', '2016-12-31'),
                            ('DUMP' , 'Dumpster', '2016-12-31'),
                            ('DUTY' , 'Duty Officer Notification', '2016-12-31'),
                            ('ELCFS' , 'Electrical Fire - Substation', '2016-12-31'),
                            ('EXP' , 'Explosion', '2016-12-31'),
                            ('FALRMC' , 'Fire Alarms - Commercial', '2016-12-31'),
                            ('FALRMF' , 'Fire Alarms - False', '2016-12-31'),
                            ('FALRMR' , 'Fire Alarms - Residential', '2016-12-31'),
                            ('FLOOD' , 'Flooding', '2016-12-31'),
                            ('FOCC' , 'Admin Call Records', '2016-12-31'),
                            ('FOREST' , 'Forestry - Notification', '2016-12-31'),
                            ('GAS' , 'Gas Leak - Natural/LPG', '2016-12-31'),
                            ('HANG' , '911 Hang Up', '2016-12-31'),
                            ('HAZM1' , 'HazMat1 - Low Risk', '2016-12-31'),
                            ('HAZM2' , 'HazMat2 - Mod Risk', '2016-12-31'),
                            ('HAZM3' , 'HazMat3 - High Risk', '2016-12-31'),
                            ('HYDRO' , 'Hydro - Notification', '2016-12-31'),
                            ('INVEST' , 'Investigation', '2016-12-31'),
                            ('ISOF' , 'Isolated Fire', '2016-12-31'),
                            ('ISOITEM' , 'Item Fire', '2016-12-31'),
                            ('KITAMB' , 'Kitimat Ambulance', '2016-12-31'),
                            ('KITF' , 'Kitchen Item Fire', '2016-12-31'),
                            ('LIFT' , 'Lift Assist', '2016-12-31'),
                            ('LIFTEMG' , 'Lift Assist Emergency', '2016-12-31'),
                            ('LIFTR' , 'Lift Assist - Routine', '2016-12-31'),
                            ('MED' , 'Medical Aid', '2016-12-31'),
                            ('MEDR' , 'Medical Aid - BCAS Routine', '2016-12-31'),
                            ('MFIRE' , 'Medical Emergency/Fire Emergency', '2016-12-31'),
                            ('MVI1' , 'MVI1- Motor Vehicle Incident', '2016-12-31'),
                            ('MVI2' , 'MVI2 - Multiple Vehicles/Patients', '2016-12-31'),
                            ('MVI3' , 'MVI3 - Entrapment; Motor Vehicle Incident', '2016-12-31'),
                            ('MVI4' , 'MVI4 - Entrapment; Multiple Vehicles/Patients', '2016-12-31'),
                            ('NATGAS' , 'Natural Gas - Notification', '2016-12-31'),
                            ('ODOUU' , 'Odour Unknown', '2016-12-31'),
                            ('OPEN' , 'Open Air Fire', '2016-12-31'),
                            ('PEDSTK' , 'Pedestrian Struck', '2016-12-31'),
                            ('POLICE' , 'Police - Notification', '2016-12-31'),
                            ('RESC' , 'Rescue - Low Risk', '2016-12-31'),
                            ('RMED' , 'Routine Medical Aid', '2016-12-31'),
                            ('RSC' , 'Rescue - Other', '2016-12-31'),
                            ('RSCCON' , 'Rescue - Confined Space', '2016-12-31'),
                            ('RSCHIG' , 'Rescue - High Angle', '2016-12-31'),
                            ('RSCICE' , 'Rescue - Ice', '2016-12-31'),
                            ('RSCIND' , 'Rescue - Industrial', '2016-12-31'),
                            ('RSCWTR' , 'Rescue - Water', '2016-12-31'),
                            ('RSCON' , 'Rescue - Confined Space', '2016-12-31'),
                            ('RSHIG' , 'Rescue - High Angle', '2016-12-31'),
                            ('RSICE' , 'Rescue - Ice', '2016-12-31'),
                            ('RSIND' , 'Rescue - Industrial', '2016-12-31'),
                            ('RSWTR' , 'Rescue - Water', '2016-12-31'),
                            ('SHIPD' , 'Ship/Boat Fire - At Dock', '2016-12-31'),
                            ('SHIPU' , 'Ship/Boat Fire - Underway', '2016-12-31'),
                            ('SMKIN' , 'Smoke Report - Inside', '2016-12-31'),
                            ('SMKOT' , 'Smoke Report - Outside', '2016-12-31'),
                            ('STC' , 'Structure Collapse', '2016-12-31'),
                            ('STF1' , 'Structure Fire - Small', '2016-12-31'),
                            ('STF2' , 'Structure Fire - Large', '2016-12-31'),
                            ('TERASEN' , 'Terasen Gas - Notification', '2016-12-31'),
                            ('TRNSF' , 'Transformer/Pole Fire', '2016-12-31'),
                            ('VEHF' , 'Vehicle Fire', '2016-12-31'),
                            ('WILD1' , 'Wildland - Small', '2016-12-31'),
                            ('WILD2' , 'Wildland - Large', '2016-12-31'),
                            ('WILD3' , 'Wildland - Interface', '2016-12-31'),
                            ('WILDINT' , 'Wildland - Interface', '2016-12-31'),
                            ('WIRES' , 'Hydro Lines Down', '2016-12-31');"
                      
schema_upgrade_4_2 = "UPDATE config 
                      SET keyvalue= '4.2' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_4_3 = "UPDATE IGNORE callout_status SET behaviour_flags = 30 WHERE name = 'Cancelled';"
                      
schema_upgrade_4_4 = "UPDATE IGNORE callout_status SET behaviour_flags = 30 WHERE name = 'Complete';"

schema_upgrade_4_5 = "UPDATE IGNORE callout_status SET behaviour_flags = 16 WHERE name = 'NotResponding';"

schema_upgrade_4_6 = "UPDATE config 
                      SET keyvalue= '4.6' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_4_7 = "ALTER TABLE user_accounts ADD COLUMN active BOOLEAN NOT NULL DEFAULT 1 AFTER user_type;"
schema_upgrade_4_7_skip_error = true

schema_upgrade_4_8 = "UPDATE config 
                      SET keyvalue= '4.8' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_4_9 = "ALTER TABLE user_accounts ADD COLUMN email varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' AFTER active;"
schema_upgrade_4_9_skip_error = true

schema_upgrade_5_0 = "UPDATE config 
                      SET keyvalue= '5.0' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_5_1 = "CREATE TABLE IF NOT EXISTS `callouts_info` (
                      `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                      `address` varchar(255) COLLATE utf8_unicode_ci NULL,
                      `latitude` DECIMAL(10,6) NULL,  
                      `longitude` DECIMAL(10,6) NULL,
                      `comments` varchar(255) COLLATE utf8_unicode_ci NULL,
                      `effective_date` datetime DEFAULT NULL,
                      `expiration_date` datetime DEFAULT NULL,
                      `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;"

schema_upgrade_5_2 = "UPDATE config 
                      SET keyvalue= '5.2' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_5_3 = "CREATE TABLE IF NOT EXISTS `url_proxy` (
                      `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                      `shorturl` varchar(255) COLLATE utf8_unicode_ci NULL,
                      `longurl` varchar(255) COLLATE utf8_unicode_ci NULL,
                      `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;"

schema_upgrade_5_4 = "UPDATE config 
                      SET keyvalue= '5.4' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_5_5 = "ALTER TABLE user_accounts ADD COLUMN twofa BOOLEAN NOT NULL DEFAULT 0 AFTER active;"
schema_upgrade_5_5_skip_error = true

schema_upgrade_5_6 = "ALTER TABLE user_accounts ADD COLUMN twofa_key varchar(100) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' AFTER twofa;"
schema_upgrade_5_6_skip_error = true

schema_upgrade_5_7 = "UPDATE config 
                      SET keyvalue= '5.7' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_5_8 = "CREATE TABLE IF NOT EXISTS `login_audit` (
                      `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                      `useracctid` INT(11) NULL,
                      `username` varchar(255) COLLATE utf8_unicode_ci NULL,
                      `status` INT(11) NOT NULL,
                      `login_agent` varchar(255) COLLATE utf8_unicode_ci NULL,
                      `login_ip` varchar(100) COLLATE utf8_unicode_ci NULL,
                      `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;"
schema_upgrade_5_8_skip_error = true

schema_upgrade_5_9 = "UPDATE config 
                      SET keyvalue= '5.9' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_6_0 = "ALTER TABLE user_accounts MODIFY twofa INTEGER NOT NULL DEFAULT 0;"

schema_upgrade_6_1 = "UPDATE user_accounts SET twofa_key='';"

schema_upgrade_6_2 = "UPDATE config 
                      SET keyvalue= '6.2' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"

schema_upgrade_6_3 = "CREATE TABLE IF NOT EXISTS `callouts_response_audit` (
                      `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                      `calloutid` int(11) NOT NULL,
                      `useracctid` int(11) NOT NULL,
                      `responsetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                      `latitude` DECIMAL(10,6) DEFAULT NULL,  
                      `longitude` DECIMAL(10,6) DEFAULT NULL,
                      `eta` int(11),
                      `status` int(11) NOT NULL DEFAULT 0
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;"
schema_upgrade_6_3_skip_error = true

schema_upgrade_6_4 = "INSERT INTO callouts_response_audit (calloutid,useracctid,responsetime,latitude,longitude,eta,status)
                      SELECT calloutid,useracctid,responsetime,latitude,longitude,eta,status FROM callouts_response 
                      ORDER BY calloutid,responsetime;"
schema_upgrade_6_4_skip_error = true

schema_upgrade_6_5 = "UPDATE config 
                      SET keyvalue= '6.5' WHERE firehall_id = -1 AND keyname = 'DB_SCHEMA_VERSION' AND keyindex = 0;"
